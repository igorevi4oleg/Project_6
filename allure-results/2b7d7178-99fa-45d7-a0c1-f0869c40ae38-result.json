{"name": "test_order_flow[\\u041f\\u0451\\u0442\\u0440-\\u041f\\u0435\\u0442\\u0440\\u043e\\u0432-\\u041c\\u043e\\u0441\\u043a\\u0432\\u0430, \\u0443\\u043b\\u0438\\u0446\\u0430 \\u041f\\u0443\\u0448\\u043a\\u0438\\u043d\\u0430, \\u0434. 2-+79876543210-None]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16", "trace": "driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"2127c292-a2df-4394-93e3-4f86d793220e\")>, main_page = <page_objects.main_page.MainPage object at 0x000001D9E0893ED0>\norder_page = <page_objects.order_page.OrderPage object at 0x000001D9E0964050>, name = 'Пётр', surname = 'Петров', address = 'Москва, улица Пушкина, д. 2', phone = '+79876543210', metro_station = None\n\n    @pytest.mark.parametrize(\"name, surname, address, phone, metro_station\", [\n        (\"Иван\", \"Иванов\", \"Москва, улица Ленина, д. 1\", \"+71234567890\", None),  # Берём первую станцию\n        (\"Пётр\", \"Петров\", \"Москва, улица Пушкина, д. 2\", \"+79876543210\", None)  # Выбираем конкретную станцию\n    ])\n    \n    def test_order_flow(driver, main_page, order_page, name, surname, address, phone, metro_station):\n        # Кликаем по кнопке \"Заказать\" (для верхней кнопки)\n        main_page.click_order_button(position='top')\n    \n        # Заполняем форму заказа и выбираем станцию метро\n        order_page.fill_order_form(name, surname, address, phone, metro_station)\n    \n        order_page.select_metro_station()\n    \n        # Нажимаем кнопку \"Далее\"\n        order_page.submit_order()\n    \n        order_page.set_delivery_date(\"01.12.2024\")  # Заменить на актуальную дату\n        order_page.select_rental_period(period=\"сутки\")\n    \n        # Нажимаем кнопку \"Заказать\"\n>       order_page.accept_order()\n\ntests\\test_order.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\order_page.py:99: in accept_order\n    inform_window = WebDriverWait(self.driver, 5).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2127c292-a2df-4394-93e3-4f86d793220e\")>, method = <function presence_of_element_located.<locals>._predicate at 0x000001D9E09AA3E0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "attachments": [{"name": "stdout", "source": "55577b37-a117-491a-8266-49cf47415c68-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "name", "value": "'Пётр'"}, {"name": "surname", "value": "'Петров'"}, {"name": "address", "value": "'Москва, улица Пушкина, д. 2'"}, {"name": "phone", "value": "'+79876543210'"}, {"name": "metro_station", "value": "None"}], "start": 1732919872863, "stop": 1732919881400, "uuid": "8ab54c1f-a835-4cdd-97b4-e1be4fbeb362", "historyId": "9a584e0ef566eb76c68043fb13ebc35a", "testCaseId": "9df31a62ef560a0c9f3608aea222d388", "fullName": "tests.test_order#test_order_flow", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order"}, {"name": "host", "value": "DESKTOP-CDD6FLQ"}, {"name": "thread", "value": "10776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order"}]}