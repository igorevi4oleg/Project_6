{"name": "test_order_flow[\\u0418\\u0432\\u0430\\u043d-\\u0418\\u0432\\u0430\\u043d\\u043e\\u0432-\\u041c\\u043e\\u0441\\u043a\\u0432\\u0430, \\u0443\\u043b\\u0438\\u0446\\u0430 \\u041b\\u0435\\u043d\\u0438\\u043d\\u0430, \\u0434. 1-+71234567890-None]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .Order_Modal__YZ-d3; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16", "trace": "driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"ee4dd613-f845-4b3f-9ba5-1341e902e966\")>, main_page = <page_objects.main_page.MainPage object at 0x000001C841294440>\norder_page = <page_objects.order_page.OrderPage object at 0x000001C8412941A0>, name = 'Иван', surname = 'Иванов', address = 'Москва, улица Ленина, д. 1', phone = '+71234567890', metro_station = None\n\n    @pytest.mark.parametrize(\"name, surname, address, phone, metro_station\", [\n        (\"Иван\", \"Иванов\", \"Москва, улица Ленина, д. 1\", \"+71234567890\", None),  # Берём первую станцию\n        (\"Пётр\", \"Петров\", \"Москва, улица Пушкина, д. 2\", \"+79876543210\", None)  # Выбираем конкретную станцию\n    ])\n    \n    def test_order_flow(driver, main_page, order_page, name, surname, address, phone, metro_station):\n        # Кликаем по кнопке \"Заказать\" (для верхней кнопки)\n        main_page.click_order_button(position='top')\n    \n        # Заполняем форму заказа и выбираем станцию метро\n        order_page.fill_order_form(name, surname, address, phone, metro_station)\n    \n        order_page.select_metro_station()\n    \n        # Нажимаем кнопку \"Далее\"\n        order_page.submit_order()\n    \n        order_page.set_delivery_date(\"01.12.2024\")  # Заменить на актуальную дату\n        order_page.select_rental_period(period=\"сутки\")\n    \n        # Нажимаем кнопку \"Заказать\"\n        order_page.accept_order()\n    \n        # Проверяем всплывающее окно с успешным сообщением\n>       success_message = driver.find_element(By.CSS_SELECTOR, \".Order_Modal__YZ-d3\").text\n\ntests\\test_order.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C841294AD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .Order_Modal__YZ-d3.../content/shared/webdriver/Errors.sys.mjs:511:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .Order_Modal__YZ-d3; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException"}, "attachments": [{"name": "stdout", "source": "6a977e4d-f848-44d0-96ec-bbfed0072200-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "name", "value": "'Иван'"}, {"name": "surname", "value": "'Иванов'"}, {"name": "address", "value": "'Москва, улица Ленина, д. 1'"}, {"name": "phone", "value": "'+71234567890'"}, {"name": "metro_station", "value": "None"}], "start": 1732918940667, "stop": 1732918943957, "uuid": "41b94ec3-de30-4ba7-8e4e-c399bce56fb6", "historyId": "53211477651eefca35924df8bc53f1a8", "testCaseId": "9df31a62ef560a0c9f3608aea222d388", "fullName": "tests.test_order#test_order_flow", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order"}, {"name": "host", "value": "DESKTOP-CDD6FLQ"}, {"name": "thread", "value": "20976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order"}]}